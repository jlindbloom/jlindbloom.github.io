{"title":"Research","markdown":{"yaml":{"title":"Research","echo":false,"jupyter":"python3","section-divs":false,"keep-md":true},"headingText":"Me","containsRefs":false,"markdown":"\n\n```{python}\nimport yaml\nfrom IPython.display import display, Markdown, HTML\n\nme = \"Jonathan Lindbloom\"\n\n# This code is adapted from Drew Dimmery's post: https://ddimmery.com/posts/quarto-website/\n\ndef readable_list(_s):\n    \"\"\"Makes a list of names into a readable list.\n    \"\"\"\n    if len(_s) < 3:\n        return ' and '.join(map(str, _s))\n    *a, b = _s\n    return f\"{', '.join(map(str, a))}, and {b}\"\n\n\ndef button(url, str, icon):\n    \"\"\"Builds the HTML for a button.\n    \"\"\"\n    icon_base = icon[:2]\n\n    return f\"\"\"<a href=\"{url}\" class=\"btn btn-outline-info btn-sm\" role=\"button\" target=\"_blank\"> <i class=\"{icon_base} {icon}\" role='img'></i>{\"   \"+str}</a>\"\"\"\n\n\ndef space_between_buttons(buttons):\n    \"\"\"Adds space between the buttons.\n    \"\"\"\n    if len(buttons) > 1:\n        new_buttons = []\n        for j, item in enumerate(buttons):\n            if j > 0:\n                item = \"&nbsp; \" + item\n            else:\n                pass\n            new_buttons.append(item)\n        return new_buttons\n    else:\n        return buttons\n\n\n\n# Load all data\ntalks_data = yaml.safe_load(open(\"talks.yaml\"))\nposters_data = yaml.safe_load(open(\"posters.yaml\"))\npreprints_data = yaml.safe_load(open(\"preprints.yaml\"))\ntechnical_articles_data = yaml.safe_load(open(\"technical_articles.yaml\"))\n\n# Dict for storing all info\npub_strs = {\n    \"preprints\": [],\n    \"talks\": [],\n    \"posters\": [],\n    \"technical_articles\": [],\n}\n\n\n\n# Iterate over preprints\nfor _, data in preprints_data.items():\n\n    # Required\n    preprint_title = data[\"title\"]\n    authors = data[\"authors\"]\n    year = data[\"year\"]\n\n    # Make preprint title stronger\n    preprint_title = f\"\"\"<strong>{preprint_title}.</strong><br>\"\"\"\n\n    # Make author string\n    authors = data.get(\"authors\")\n    if authors is None:\n        pass\n    else:\n        author_list = []\n        for author in authors:\n            author_list.append(author)\n\n        authors = readable_list(authors)\n\n    # Article string\n    article_str = f\"{preprint_title} {authors}.\"\n\n    # Add year \n    article_str += f\" {year}.\"\n\n    # List for storing buttons\n    buttons = []\n\n    # If we have a url, add the link\n    url = data.get(\"url\")\n    if url is not None:\n        buttons.append(button(url, \"&nbsp; arXiv\", \"bi bi-link-45deg\"))\n\n    # Now add space between buttons\n    buttons = space_between_buttons(buttons)\n\n    # Now add the talk to the dict\n    pub_strs[\"preprints\"].append(\n        article_str + \"\"\"<p style=\"margin-bottom:0.2cm;\"></p>\"\"\" + \" \".join(buttons)\n        #\"<li class='list-group-item'>\" + talk_str + \"<br>\" + \" \".join(buttons) + \"</li>\"\n    )\n\n\n\n\n\n# Iterate over technical articles\nfor _, data in technical_articles_data.items():\n\n    # Required attributes\n    article_title = data[\"title\"]\n    date = data[\"date\"]\n    \n    # Make talk title stronger\n    article_title = f\"\"\"<strong>{article_title}.</strong><br>\"\"\"\n    \n    # Make author string\n    authors = data.get(\"authors\")\n    if authors is None:\n        pass\n    else:\n        author_list = []\n        for author in authors:\n            author_list.append(author)\n\n        authors = readable_list(authors)\n\n    # Article string\n    article_str = f\"{article_title} {authors}.\"\n\n    # Add venue\n    venue = data.get(\"venue\")\n    if venue is None:\n        pass\n    else:\n        article_str += f\" {venue}.\"\n\n    # Add date\n    article_str += f\" {date}.\"\n\n    # List for storing buttons\n    buttons = []\n\n    # If we have a url, add the link\n    url = data.get(\"url\")\n    if url is not None:\n        buttons.append(button(url, \"&nbsp; Link\", \"bi bi-link-45deg\"))\n\n    # Now add space between buttons\n    buttons = space_between_buttons(buttons)\n\n    # Now add the talk to the dict\n    pub_strs[\"technical_articles\"].append(\n        article_str + \"\"\"<p style=\"margin-bottom:0.2cm;\"></p>\"\"\" + \" \".join(buttons)\n        #\"<li class='list-group-item'>\" + talk_str + \"<br>\" + \" \".join(buttons) + \"</li>\"\n    )\n\n\n\n\n\n# Iterate over talks\nfor _, data in talks_data.items():\n\n    # Required attributes\n    talk_title = data[\"title\"]\n    date = data[\"date\"]\n    venue = data[\"venue\"]\n    location = data[\"location\"]\n\n    # Make talk title stronger\n    talk_title = f\"\"\"<strong>{talk_title}.</strong><br>\"\"\"\n    \n    # Talk string\n    talk_str = f\"{talk_title} {venue}. {location}. {date}.\"\n\n    # Copresenters\n    copresenters = data.get(\"copresenters\")\n    if copresenters is None:\n        pass\n    else:\n        copresenters = readable_list(copresenters)\n        talk_str += f\"\"\"<br><i>Copresenters: {copresenters}.</i>\"\"\"\n\n    # List for storing buttons\n    buttons = []\n\n    # If we have slides, add a button\n    slides_link = data.get(\"slides_link\")\n    if slides_link is not None:\n        buttons.append(button(slides_link, \"&nbsp; Slides\", \"bi-file-earmark-pdf\"))\n\n    # If we have a video, add the link\n    video_link = data.get(\"video_link\")\n    if video_link is not None:\n        buttons.append(button(video_link, \"&nbsp; Video\", \"bi bi-camera-video\"))\n\n    # Now add space between buttons\n    buttons = space_between_buttons(buttons)\n\n    # Now add the talk to the dict\n    pub_strs[\"talks\"].append(\n        talk_str + \"\"\"<p style=\"margin-bottom:0.2cm;\"></p>\"\"\" + \" \".join(buttons)\n        #\"<li class='list-group-item'>\" + talk_str + \"<br>\" + \" \".join(buttons) + \"</li>\"\n    )\n\n\n\n\n# Iterate over talks\nfor _, data in posters_data.items():\n\n    # Required attributes\n    poster_title = data[\"title\"]\n    date = data[\"date\"]\n    venue = data[\"venue\"]\n    location = data[\"location\"]\n\n    # Make talk title stronger\n    poster_title = f\"\"\"<strong>{poster_title}.</strong><br>\"\"\"\n    \n    # Talk string\n    poster_str = f\"{poster_title} {venue}. {location}. {date}.\"\n\n    # # Copresenters\n    # copresenters = data.get(\"copresenters\")\n    # if copresenters is None:\n    #     pass\n    # else:\n    #     copresenters = readable_list(copresenters)\n    #     talk_str += f\"\"\"<br><i>Copresenters: {copresenters}.</i>\"\"\"\n\n    # List for storing buttons\n    buttons = []\n\n    # If we have slides, add a button\n    poster_link = data.get(\"poster_link\")\n    if poster_link is not None:\n        buttons.append(button(poster_link, \"&nbsp; Poster\", \"bi-file-earmark-pdf\"))\n    \n    # # If we have a video, add the link\n    # video_link = data.get(\"video_link\")\n    # if video_link is not None:\n    #     buttons.append(button(video_link, \"&nbsp; Video\", \"bi bi-camera-video\"))\n\n    # Now add space between buttons\n    buttons = space_between_buttons(buttons)\n\n    # Now add the talk to the dict\n    pub_strs[\"posters\"].append(\n        poster_str + \"\"\"<p style=\"margin-bottom:0.2cm;\"></p>\"\"\" + \" \".join(buttons)\n        #\"<li class='list-group-item'>\" + talk_str + \"<br>\" + \" \".join(buttons) + \"</li>\"\n    )\n\n\n```\n\n\n\n\n## Preprints\n\n```{python}\n#| output: asis\nfor preprint_str in pub_strs[\"preprints\"]:\n    display(\n        HTML(\n            preprint_str\n        )\n    )\n    display(HTML(\"<br> <br>\"))\n\n```\n\n\n\n\n## Talks\n\n```{python}\n#| output: asis\nfor talk_str in pub_strs[\"talks\"]:\n    display(\n        HTML(\n            talk_str\n        )\n    )\n    display(HTML(\"<br> <br>\"))\n\n```\n\n\n\n\n## Posters\n\n```{python}\n#| output: asis\nfor poster_str in pub_strs[\"posters\"]:\n    display(\n        HTML(\n            poster_str\n        )\n    )\n    display(HTML(\"<br> <br>\"))\n\n```\n\n\n\n\n## Technical Articles\n\n```{python}\n#| output: asis\nfor article_str in pub_strs[\"technical_articles\"]:\n    display(\n        HTML(\n            article_str\n        )\n    )\n    display(HTML(\"<br> <br>\"))\n\n```\n\n\n\n\n\n\n","srcMarkdownNoYaml":"\n\n```{python}\nimport yaml\nfrom IPython.display import display, Markdown, HTML\n\n# Me\nme = \"Jonathan Lindbloom\"\n\n# This code is adapted from Drew Dimmery's post: https://ddimmery.com/posts/quarto-website/\n\ndef readable_list(_s):\n    \"\"\"Makes a list of names into a readable list.\n    \"\"\"\n    if len(_s) < 3:\n        return ' and '.join(map(str, _s))\n    *a, b = _s\n    return f\"{', '.join(map(str, a))}, and {b}\"\n\n\ndef button(url, str, icon):\n    \"\"\"Builds the HTML for a button.\n    \"\"\"\n    icon_base = icon[:2]\n\n    return f\"\"\"<a href=\"{url}\" class=\"btn btn-outline-info btn-sm\" role=\"button\" target=\"_blank\"> <i class=\"{icon_base} {icon}\" role='img'></i>{\"   \"+str}</a>\"\"\"\n\n\ndef space_between_buttons(buttons):\n    \"\"\"Adds space between the buttons.\n    \"\"\"\n    if len(buttons) > 1:\n        new_buttons = []\n        for j, item in enumerate(buttons):\n            if j > 0:\n                item = \"&nbsp; \" + item\n            else:\n                pass\n            new_buttons.append(item)\n        return new_buttons\n    else:\n        return buttons\n\n\n\n# Load all data\ntalks_data = yaml.safe_load(open(\"talks.yaml\"))\nposters_data = yaml.safe_load(open(\"posters.yaml\"))\npreprints_data = yaml.safe_load(open(\"preprints.yaml\"))\ntechnical_articles_data = yaml.safe_load(open(\"technical_articles.yaml\"))\n\n# Dict for storing all info\npub_strs = {\n    \"preprints\": [],\n    \"talks\": [],\n    \"posters\": [],\n    \"technical_articles\": [],\n}\n\n\n\n# Iterate over preprints\nfor _, data in preprints_data.items():\n\n    # Required\n    preprint_title = data[\"title\"]\n    authors = data[\"authors\"]\n    year = data[\"year\"]\n\n    # Make preprint title stronger\n    preprint_title = f\"\"\"<strong>{preprint_title}.</strong><br>\"\"\"\n\n    # Make author string\n    authors = data.get(\"authors\")\n    if authors is None:\n        pass\n    else:\n        author_list = []\n        for author in authors:\n            author_list.append(author)\n\n        authors = readable_list(authors)\n\n    # Article string\n    article_str = f\"{preprint_title} {authors}.\"\n\n    # Add year \n    article_str += f\" {year}.\"\n\n    # List for storing buttons\n    buttons = []\n\n    # If we have a url, add the link\n    url = data.get(\"url\")\n    if url is not None:\n        buttons.append(button(url, \"&nbsp; arXiv\", \"bi bi-link-45deg\"))\n\n    # Now add space between buttons\n    buttons = space_between_buttons(buttons)\n\n    # Now add the talk to the dict\n    pub_strs[\"preprints\"].append(\n        article_str + \"\"\"<p style=\"margin-bottom:0.2cm;\"></p>\"\"\" + \" \".join(buttons)\n        #\"<li class='list-group-item'>\" + talk_str + \"<br>\" + \" \".join(buttons) + \"</li>\"\n    )\n\n\n\n\n\n# Iterate over technical articles\nfor _, data in technical_articles_data.items():\n\n    # Required attributes\n    article_title = data[\"title\"]\n    date = data[\"date\"]\n    \n    # Make talk title stronger\n    article_title = f\"\"\"<strong>{article_title}.</strong><br>\"\"\"\n    \n    # Make author string\n    authors = data.get(\"authors\")\n    if authors is None:\n        pass\n    else:\n        author_list = []\n        for author in authors:\n            author_list.append(author)\n\n        authors = readable_list(authors)\n\n    # Article string\n    article_str = f\"{article_title} {authors}.\"\n\n    # Add venue\n    venue = data.get(\"venue\")\n    if venue is None:\n        pass\n    else:\n        article_str += f\" {venue}.\"\n\n    # Add date\n    article_str += f\" {date}.\"\n\n    # List for storing buttons\n    buttons = []\n\n    # If we have a url, add the link\n    url = data.get(\"url\")\n    if url is not None:\n        buttons.append(button(url, \"&nbsp; Link\", \"bi bi-link-45deg\"))\n\n    # Now add space between buttons\n    buttons = space_between_buttons(buttons)\n\n    # Now add the talk to the dict\n    pub_strs[\"technical_articles\"].append(\n        article_str + \"\"\"<p style=\"margin-bottom:0.2cm;\"></p>\"\"\" + \" \".join(buttons)\n        #\"<li class='list-group-item'>\" + talk_str + \"<br>\" + \" \".join(buttons) + \"</li>\"\n    )\n\n\n\n\n\n# Iterate over talks\nfor _, data in talks_data.items():\n\n    # Required attributes\n    talk_title = data[\"title\"]\n    date = data[\"date\"]\n    venue = data[\"venue\"]\n    location = data[\"location\"]\n\n    # Make talk title stronger\n    talk_title = f\"\"\"<strong>{talk_title}.</strong><br>\"\"\"\n    \n    # Talk string\n    talk_str = f\"{talk_title} {venue}. {location}. {date}.\"\n\n    # Copresenters\n    copresenters = data.get(\"copresenters\")\n    if copresenters is None:\n        pass\n    else:\n        copresenters = readable_list(copresenters)\n        talk_str += f\"\"\"<br><i>Copresenters: {copresenters}.</i>\"\"\"\n\n    # List for storing buttons\n    buttons = []\n\n    # If we have slides, add a button\n    slides_link = data.get(\"slides_link\")\n    if slides_link is not None:\n        buttons.append(button(slides_link, \"&nbsp; Slides\", \"bi-file-earmark-pdf\"))\n\n    # If we have a video, add the link\n    video_link = data.get(\"video_link\")\n    if video_link is not None:\n        buttons.append(button(video_link, \"&nbsp; Video\", \"bi bi-camera-video\"))\n\n    # Now add space between buttons\n    buttons = space_between_buttons(buttons)\n\n    # Now add the talk to the dict\n    pub_strs[\"talks\"].append(\n        talk_str + \"\"\"<p style=\"margin-bottom:0.2cm;\"></p>\"\"\" + \" \".join(buttons)\n        #\"<li class='list-group-item'>\" + talk_str + \"<br>\" + \" \".join(buttons) + \"</li>\"\n    )\n\n\n\n\n# Iterate over talks\nfor _, data in posters_data.items():\n\n    # Required attributes\n    poster_title = data[\"title\"]\n    date = data[\"date\"]\n    venue = data[\"venue\"]\n    location = data[\"location\"]\n\n    # Make talk title stronger\n    poster_title = f\"\"\"<strong>{poster_title}.</strong><br>\"\"\"\n    \n    # Talk string\n    poster_str = f\"{poster_title} {venue}. {location}. {date}.\"\n\n    # # Copresenters\n    # copresenters = data.get(\"copresenters\")\n    # if copresenters is None:\n    #     pass\n    # else:\n    #     copresenters = readable_list(copresenters)\n    #     talk_str += f\"\"\"<br><i>Copresenters: {copresenters}.</i>\"\"\"\n\n    # List for storing buttons\n    buttons = []\n\n    # If we have slides, add a button\n    poster_link = data.get(\"poster_link\")\n    if poster_link is not None:\n        buttons.append(button(poster_link, \"&nbsp; Poster\", \"bi-file-earmark-pdf\"))\n    \n    # # If we have a video, add the link\n    # video_link = data.get(\"video_link\")\n    # if video_link is not None:\n    #     buttons.append(button(video_link, \"&nbsp; Video\", \"bi bi-camera-video\"))\n\n    # Now add space between buttons\n    buttons = space_between_buttons(buttons)\n\n    # Now add the talk to the dict\n    pub_strs[\"posters\"].append(\n        poster_str + \"\"\"<p style=\"margin-bottom:0.2cm;\"></p>\"\"\" + \" \".join(buttons)\n        #\"<li class='list-group-item'>\" + talk_str + \"<br>\" + \" \".join(buttons) + \"</li>\"\n    )\n\n\n```\n\n\n\n\n## Preprints\n\n```{python}\n#| output: asis\nfor preprint_str in pub_strs[\"preprints\"]:\n    display(\n        HTML(\n            preprint_str\n        )\n    )\n    display(HTML(\"<br> <br>\"))\n\n```\n\n\n\n\n## Talks\n\n```{python}\n#| output: asis\nfor talk_str in pub_strs[\"talks\"]:\n    display(\n        HTML(\n            talk_str\n        )\n    )\n    display(HTML(\"<br> <br>\"))\n\n```\n\n\n\n\n## Posters\n\n```{python}\n#| output: asis\nfor poster_str in pub_strs[\"posters\"]:\n    display(\n        HTML(\n            poster_str\n        )\n    )\n    display(HTML(\"<br> <br>\"))\n\n```\n\n\n\n\n## Technical Articles\n\n```{python}\n#| output: asis\nfor article_str in pub_strs[\"technical_articles\"]:\n    display(\n        HTML(\n            article_str\n        )\n    )\n    display(HTML(\"<br> <br>\"))\n\n```\n\n\n\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":true,"include":true,"keep-md":true,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"section-divs":false,"output-file":"research.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.551","theme":["superhero","custom.scss"],"title":"Research","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}